# LICENSE

# CloudFormation template to create publishing pipeline for a single or group of
# python packages as Lambda layers in all support AWS regions. It will create all
# will cehck for new version of targeted packages, build new layers, and publish the
# new details via GitHub README file and via public API Gateway request.

# Prerequisites:
# - github repo
# - GitHub personal access token for repo allowing full permissions (see: https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/)

# CWE with lambda to detect new version of any related pakages and then initiate CB project
# - lambda
# - CWE
# - role for lambda
# - CWE to invoke lmabda

# apig with resources:
# - return latest arn for requested region
# - return arn for specifc region/version

# cloudtrail trail to log all APIG requests and Lamda layer access

---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Automates discovery and build of Lambda layers for define python packages.
  Publishes updates to GitHub repo and accessible via API Gateway. By default a
  database entry is made for boto3 in us-east-1 and us-west-2.

Parameters:
  GitHubRepo:
    Type: String
    Description: Public GitHub repository for updating main README.md file
    Default: https://github.com/USERNAME/REPO
  GitHubAccessToken:
    Type: String
    Description: AWS System Manager GitHub access token parameter to pass to build jobs (NOT THE ACTUAL TOKEN)
    Default: /CodeBuild/KEYNAME

Resources:
  CodeBuildProject:
      Type: "AWS::CodeBuild::Project"
      Properties:
        TimeoutInMinutes: 15
        Artifacts: 
          Type: "NO_ARTIFACTS"
        Cache: 
          Type: "NO_CACHE"
        Description: "Build python packages and publish as lambda layers"
        Environment: 
          ComputeType: "BUILD_GENERAL1_SMALL"
          Image: "aws/codebuild/docker:18.09.0"
          Type: "LINUX_CONTAINER"
          PrivilegedMode: true
          EnvironmentVariables:
          - Name: GITHUB_TOKEN
            Type: PARAMETER_STORE
            Value: !Ref GitHubAccessToken
          - Name: VERSION_TABLE
            Type: PLAINTEXT
            Value: !Ref VersionTable
        ServiceRole: !GetAtt CodeBuildServiceRole.Arn
        Name: !Join
                - "_"
                -
                  - !Join ["", !Split ["-",  !Ref "AWS::StackName"] ]
                  - "lambda_layer_factory"
        Source: 
          Type: "GITHUB"
          Auth:
            Type: "OAUTH"
          GitCloneDepth: 1
          InsecureSsl: "false"
          Location: !Join ["", [!Ref GitHubRepo, ".git"] ]
          BuildSpec: "codebuild/buildspec.yml"
          ReportBuildStatus: "false"

  VersionTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Join
                  - ""
                  -
                    - !Join ["", !Split ["-",  !Ref "AWS::StackName"] ]
                    - "-VersionTable"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
        -
          AttributeName: "GSIPK"
          AttributeType: "S"
        -
          AttributeName: "GSISK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: 'SK'
          KeyType: "RANGE"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "GSI1"
          KeySchema: 
            - 
              AttributeName: "GSIPK"
              KeyType: "HASH"
            - 
              AttributeName: "GSISK"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes:
              - "PK"
              - "SK"
            ProjectionType: "INCLUDE"

  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import cfnresponse
          import logging

          def handler(event, context):
              try:
                  print('Received event: {}'.format(json.dumps(event)))
                  print('Environment variables: {}'.format(os.environ))
                  result = cfnresponse.SUCCESS

                  if event['RequestType'] == 'Create':
                      # Create example package in a couple regions
                      client = boto3.resource('dynamodb')
                      table = client.Table(event['ResourceProperties']['TableName'])
                      table.put_item(
                        Item= {
                          'PK': 'boto3',
                          'SK':  'MASTER',
                          'Regions': 'us-east-1,us-west-2',
                          'Runtimes': 'python37',
                          'PackageVersions': [],
                          'GSIPK': 'PACKAGE',
                          'GSISK': 'boto3'
                        }
                      )
                  elif event['RequestType'] == 'Update':
                      result = cfnresponse.SUCCESS
                  elif event['RequestType'] == 'Delete':
                      result = cfnresponse.SUCCESS
              except Exception as e:
                  logging.error('Error: %s', e)
                  result = cfnresponse.FAILED
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.handler
      Role: !GetAtt LambdaInitRole.Arn
      Runtime: python3.6
      Timeout: 60

  InitializeDynamoDB:
      Type: Custom::InitFunction
      Properties:
        ServiceToken: !GetAtt InitFunction.Arn
        TableName: !Ref VersionTable

  # Roles and policies
  CodeBuildServiceRole:
    # Default permissions to run CodeBuild jos
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: CodeBuildCloudWatchLogs
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Join
              - ""
              -
                - "arn:aws:logs:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":log-group:/aws/codebuild/"
                - !Join ["", !Split ["-",  !Ref "AWS::StackName"] ]
                # leading underscore as not using same Join/Split as in CodeBuild resource
                - "_lambda_layer_factory"
            - !Join
              - ""
              -
                - "arn:aws:logs:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":log-group:/aws/codebuild/"
                - !Join ["", !Split ["-",  !Ref "AWS::StackName"] ]
                # leading underscore as not using same Join/Split as in CodeBuild resource
                # also include :* after CodeBiuild resource
                - "_lambda_layer_factory:*"
          - Sid: CodePipelineS3Access
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Resource:
            - "arn:aws:s3:::codepipeline-us-west-2-*"
          - Sid: SSMCodeBuildKeys
            Effect: Allow
            Action:
            - ssm:GetParameters
            Resource:
            - !Join
              - ""
              -
                - "arn:aws:ssm:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":parameter/CodeBuild/*"
          - Sid: LambdaAccess
            Effect: Allow
            Action:
            - lambda:GetAccountSettings
            - lambda:AddLayerVersionPermission
            - lambda:PublishLayerVersion
            Resource:
            - "*"
          - Sid: DynamoTableAccess
            Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - !Join
              - ""
              -
                - "arn:aws:dynamodb:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":table/"
                - !Ref VersionTable
            - !Join
              - ""
              -
                - "arn:aws:dynamodb:"
                - !Ref "AWS::Region"
                - ":"
                - !Ref "AWS::AccountId"
                - ":table/"
                - !Ref VersionTable
                - "/index/*"
          - Sid: EC2Describe
            Effect: Allow
            Action:
            - ec2:DescribeRegions
            Resource:
            - "*"

  LambdaInitRole:
  # Permissions for inline custom resource
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"
Outputs:
  TableName:
    Description: test - DDB table name
    Value: !Ref VersionTable
